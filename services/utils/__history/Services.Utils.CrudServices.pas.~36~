unit Services.Utils.CrudServices;

interface

uses
  System.SysUtils,
  IdHTTP,
  System.Generics.Collections,
  System.JSON,
  REST.JSON,
  Services.Utils.BaseService;

type
  CrudService = class(BaseService)
    function baseCrudPath(): string; virtual; abstract;
    function GetList(Page: Integer = 1; PerPage: Integer = 30; Options: TObject = nil): string;
  end;

implementation

function CrudService.GetList(Page: Integer = 1; PerPage: Integer = 30; Options: TObject = nil): string;
var
  IdHTTP   : TIdHTTP;
  JSONValue: TJSONValue;
  I        : Integer;
begin
  try
    IdHTTP := TIdHTTP.Create(nil);
    try
      try
        IdHTTP.Get(baseCrudPath());

        if IdHTTP.ResponseCode = 200 then
        begin
          JSONValue := TJSONObject.ParseJSONValue(IdHTTP.ResponseText);

          if JSONValue <> nil then
          begin
            // ListResult.Page       := JSONValue.GetValue<Integer>('page', 1);
            // ListResult.PerPage    := JSONValue.GetValue<Integer>('perPage', 30);
            // ListResult.totalItems := JSONValue.GetValue<Integer>('totalItems', 0);
            // ListResult.totalPages := JSONValue.GetValue<Integer>('totalPages', 0);

            // Obtenha a matriz de itens e faça a decodificação para o tipo T
            // Aqui, você precisará processar cada item retornado e convertê-lo para o tipo T
            // Por exemplo:
            // for I := 0 to JSONValue.GetValue<TJSONArray>('items').Count - 1 do
            // begin
            // ListResult.items[I] := Decode<T>(JSONValue.GetValue<TJSONObject>('items').Items[I]);
            // end;
          end;
        end;

      except
        on E: Exception do
          Result := 'Error: ' + E.Message;
      end;
    finally
      IdHTTP.Free;
    end;
  finally
    Request.Free;
    Response.Free;
  end;
end;

end.
