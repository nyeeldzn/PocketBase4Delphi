unit Services.Utils.CrudServices;

interface

uses
  SysUtils,
  IdSSLOpenSSL,
  IdHTTP,
  Classes,
  Generics.Collections,

  {$IFNDEF FPC}

  System.JSON,
  REST.JSON,

  {$ELSE}

  fpjson, jsonparser,

  {$ENDIF}

  Variants,
  superobject,
  RESTRequest4D,
  Services.Utils.Dtos,
  Services.Utils.Options,
  Services.Utils.BaseService;

type

  { CrudService }
  CrudService = class(BaseService)
    FQueryOptions: QueryOptions;

    function baseCrudPath(): string; virtual; abstract;

    constructor Create(AOwner: TObject); reintroduce;
    destructor Destroy; override;

    function GetList(Options: QueryOptions = nil): string; virtual;
    function GetById(AID: string): string; virtual;
    function Insert(const AData: string): string; virtual;
    function Update(const AData: string): string; virtual;
    function TryDelete(const AData: string; var ResultError: string): boolean; virtual;
  end;

implementation

constructor CrudService.Create(AOwner: TObject);
begin
  inherited Create(AOwner);

  FQueryOptions := QueryOptions.Create;
end;

destructor CrudService.Destroy;
begin
  FQueryOptions.Free;

  inherited Destroy;
end;

function CrudService.GetList(Options: QueryOptions = nil): string;
var
  Header  : TTuple;
  Url     : string;
  Request : IRequest;
  Response: IResponse;
begin
  Url := baseCrudPath();

  Request := TRequest.New.BaseURL(Url);

  if Assigned(Options) then
  begin
    FQueryOptions := Options;
  end;

  if Assigned(FQueryOptions) then
  begin

    for Header in FQueryOptions.Headers do
    begin
      Request.AddHeader(Header.key, VarToStr(Header.Value));
    end;

    Url := baseCrudPath() + FQueryOptions.Params.GetParamString;
  end;

  Response := Request
    .Accept('application/json')
    .Get;

  case Response.StatusCode of
    200:
      Result := Response.Content;
  else
    raise Exception.Create(Response.StatusCode.ToString + ' - ' + Response.StatusText);
  end;
end;

function CrudService.GetById(AID: string): string;
var
  Header  : TTuple;
  Url     : string;
  Request : IRequest;
  Response: IResponse;
begin
  Url     := baseCrudPath();
  Request := TRequest.New;

  if Assigned(FQueryOptions) then
  begin

    for Header in FQueryOptions.Headers do
    begin
      Request.AddHeader(Header.key, VarToStr(Header.Value))
    end;

    Url := baseCrudPath() + '/' + AID + FQueryOptions.Params.GetParamString;
  end;

  Request.BaseURL(Url);

  Response := Request
    .Accept('application/json')
    .Get;

  case Response.StatusCode of
    200:
      Result := Response.Content
  else
    raise Exception.Create(Response.StatusCode.ToString + ' - ' + Response.StatusText);
  end;

end;

function CrudService.Insert(const AData: string): string;
var
  JSONBody: TStringStream;
  Request : IRequest;
  Url     : string;
  Response: IResponse;
begin
  Url      := baseCrudPath();
  JSONBody := TStringStream.Create(AData);
  Request  := TRequest.New.BaseURL(Url);

  if Assigned(FQueryOptions) then
  begin
    Url := baseCrudPath() + FQueryOptions.Params.GetParamString;
  end;

  Request.ContentType('application/json');
  Request.Accept('*/*');
  Request.AddBody(JSONBody);

  Response := Request.Post;

  case Response.StatusCode of
    200:
      Result := Response.Content
  else
    raise Exception.Create(Response.StatusCode.ToString + ' - ' + Response.StatusText);
  end;

end;

function CrudService.TryDelete(const AData: string; var ResultError: string): boolean;
var
  Url     : string;
  Response: IResponse;
  Obj     : ISuperObject;
begin
  Obj := SO(AData);
  Url      := baseCrudPath() + '/' + pUUID;
  Response := TRequest.New
    .BaseURL(Url)
    .Delete;

  case Response.StatusCode of
    400, 404:
      begin
        Result      := False;
        ResultError := Response.Content
      end
  else
    Result := True;
  end;
end;

function CrudService.Update(const AData: string): string;
var
  JSONBody: TStringStream;
  Request : IRequest;
  Url     : string;
  Response: IResponse;
  Obj     : ISuperObject;
begin
  Url      := baseCrudPath();
  JSONBody := TStringStream.Create(AData);

  Obj := SO(AData);

  if Assigned(FQueryOptions) then
  begin
    Url := baseCrudPath() + '/' + Obj.S['id'] + FQueryOptions.Params.GetParamString;
  end;

  Request := TRequest.New.BaseURL(Url);
  Request.ContentType('application/json');
  Request.Accept('*/*');
  Request.AddBody(JSONBody);

  Response := Request.Patch;

  case Response.StatusCode of
    200:
      Result := Response.Content
  else
    raise Exception.Create(Response.StatusCode.ToString + ' - ' + Response.StatusText);
  end;
end;

end.
