unit Client;

{$IFDEF FPC}
{$MODE Delphi}
{$ENDIF}

interface

uses
  Forms,
  Variants,
  System.Classes,
  Generics.Collections,
  StrUtils,
  Services.Utils.Options,
  // Services.SettingsService,
  Model.Store.BaseAuthStore,
  Services.CollectionServices,
  Services.RecordService,
  Model.Stores.LocalAuthStore,
  Services.RealtimeService;

const
  DEFAULT_LANG     = 'en-US';
  DEFAULT_BASE_URL = '/';

type
  TOptions            = TDictionary<string, Variant>;
  TBeforeSendResult   = TDictionary<string, Variant>;
  TBeforeSendDelegate = function(url: string; Options: QueryOptions): TBeforeSendResult of object;
  TAfterSendFunc      = function(response: string; data: string)         : string of object;

  PBClient = class
  private
    FBaseURL           : string;
    FBeforeSendDelegate: TBeforeSendDelegate;
    FAfterSendFunc     : TAfterSendFunc;
    FLang              : string;
    FAuthStore         : BaseAuthStore;
    // FSettings          : SettingsService;

    FRealtimeServices: RealtimeService;
    FCollections     : CollectionService;
    FRecordServices  : TDictionary<string, RecordService>;

  public
    constructor Create(
      ABaseURL: string = DEFAULT_BASE_URL;
      AAuthStore: BaseAuthStore = nil;
      ALang: string = DEFAULT_LANG
      );

    function Collection: RecordService;
  end;

implementation

{ PBClient }

function PBClient.Collection: RecordService;
begin

//  if
//    not FRecordServices.ContainsKey
//  then
//    FRecordServices.Add( RecordService.Create(Self, FBaseURL, FRealtimeServices))
//  else
    Result := RecordService.Create(Self, FBaseURL, FRealtimeServices);

end;

constructor PBClient.Create(
  ABaseURL: string = DEFAULT_BASE_URL;
  AAuthStore: BaseAuthStore = nil;
  ALang: string = DEFAULT_LANG
  );
var
  Thread: TThread;
begin
  FBaseURL := ABaseURL;
  FLang    := ALang;

  if
    Assigned(AAuthStore)
  then
    FAuthStore := AAuthStore
  else
    FAuthStore := LocalAuthStore.Create();

  FCollections      := CollectionService.Create(Self);
  FRecordServices   := TDictionary<string, RecordService>.Create;
  FRealtimeServices := RealtimeService.Create(ABaseURL, '');

  Thread := TThread.CreateAnonymousThread(
    procedure
    begin
      FRealtimeServices.Connect;
    end);

  Thread.Start;
  while not FRealtimeServices.IsConnected do
  begin
    Application.ProcessMessages;
  end;
end;

end.
